/*
 * wt-classes, utility classes used by Wt applications
 * Copyright (C) 2011 Boris Nagaev
 *
 * See the LICENSE file for terms of use.
 */

#ifndef WC_ABSTRACT_CAPTCHA_HPP_
#define WC_ABSTRACT_CAPTCHA_HPP_

#include <Wt/WGlobal>
#include <Wt/WCompositeWidget>
#include <Wt/WValidator>

namespace Wt {

namespace Wc {

/** Abstract captcha widget.
Automatic test used to ensure that the response is generated by a person.

\ingroup protection
*/
class AbstractCaptcha : public WCompositeWidget {
public:
    /** Constructor */
    AbstractCaptcha(WContainerWidget* parent = 0);

    /** Return correctness of the key, entered by user.
    If user-entered key is invalid (and non-empty),
    this also calls update() to prevent brute-force attacks.

    If the true key is entered, this is memorized and the widget
    is disabled for editing (see WWidget::disable()).
    */
    WValidator::State validate();

    /** Update the widget with new secret key.
    This method \ref new_true_key() "generates new secret key" and
    calls update_impl().
    */
    void update();

    /** Randomly created secret key.
    The purpose of user is to guess this key.
    */
    const std::string& true_key() const {
        return true_key_;
    }

    /** The key, entered by user */
    virtual std::string user_key() const = 0;

protected:
    /** Update the widget with new secret key (implementation).
    This method should setImplementation(), or update existing one.
    */
    virtual void update_impl() = 0;

    /** Generate new random secret key.
    Implementing the method, you should get random numbers from Wt::WRandom.

    \note You are unlikely to call this method,
        since it is called from update().
    */
    virtual void new_true_key() = 0;

private:
    std::string true_key_;
    bool passed_;
};

}

}

#endif

