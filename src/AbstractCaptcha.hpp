/*
 * wt-classes, utility classes used by Wt applications
 * Copyright (C) 2011 Boris Nagaev
 *
 * See the LICENSE file for terms of use.
 */

#ifndef WC_ABSTRACT_CAPTCHA_HPP_
#define WC_ABSTRACT_CAPTCHA_HPP_

#include <boost/function.hpp>

#include <Wt/WGlobal>
#include <Wt/WCompositeWidget>
#include <Wt/WSignal>

namespace Wt {

namespace Wc {

/** Abstract captcha widget.
Automatic test used to ensure that the response is generated by a person.

To use this widget, connect solved() signal to a protected slot
and call check() instead of that slot.

\ingroup protection
*/
class AbstractCaptcha : public WCompositeWidget {
public:
    /** The signal emitted if the response is erroneous.
    The first argument is error message.
    */
    typedef Signal<WString> FaultSignal;

    /** A function, returning WString */
    typedef boost::function<WString()> Test;

    /** Constructor */
    AbstractCaptcha(WContainerWidget* parent = 0);

    /** Destructor */
    ~AbstractCaptcha();

    /** Check correctness of the key, entered by user.
    In case the test is passed
    (and \ref set_precheck() "pre-check" was not set or returned true),
    solved() is emitted
    (not necessarily immediately).

    Otherwise update() is called and fault() is emitted.

    If the test was passed once for the widget,
    it is considered passed before a call of update().

    \note If previous call to check() has been resulted in call to check_impl(),
        but not to solve() or update() (i.e., a check is in progress),
        this method does nothing.
    */
    void check();

    /** Update the widget with new secret key */
    void update();

    /** Return the signal emitted if the test is passed */
    Signal<>& solved() {
        return solved_;
    }

    /** Return the signal emitted if the test was failed */
    FaultSignal& fault();

    /** Enable or disable buttons.
    Buttons (like Update button) can be added by implementations.
    You can disable them and add your own.

    By default, buttons is enabled.

    Default implementation of this method does nothing.
    */
    virtual void set_buttons(bool enabled);

    /** Replace build-in input widget.
    Some implementations provide an input widget to enter a response.
    That input widget will be removed and new input will be used.

    \note Ownership of ithe input is not transferred.

    Default implementation of this method does nothing.
    */
    virtual void set_input(WFormWidget* input);

    /** Set a function, called before a check.
    If the function returns non-empty string, check fails and
    the string is used as a error message
    */
    void set_precheck(const Test& precheck) {
        precheck_ = precheck;
    }

    /** Attempts frequency controlling function.
    Return error message, if last call from this IP address
    was not later than 3 seconds ago, else empty string.

    You can use this function by set_precheck() to prevent
    distributed brute-force attacks.

    This function is thread-safe.
    */
    static WString frequency_check();

protected:
    /** Update the widget with new secret key (implementation).
    This method should setImplementation(), or update existing one.
    */
    virtual void update_impl() = 0;

    /** You should call this method from check_impl() if the test is passed */
    void solve();

    /** You should call this method from check_impl() on error.
    \param message Error message
    This method updates the test and emits fault(), if exposed.
    */
    void mistake(const WString& message = "");

    /** Check correctness of the key, entered by user (implementation).
    If the test is passed, call solve(), otherwise update().
    */
    virtual void check_impl() = 0;

private:
    Signal<> solved_;
    FaultSignal* fault_;
    Test precheck_;
    bool in_progress_: 1;
    bool is_solved_: 1;
};

}

}

#endif

