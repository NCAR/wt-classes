/*
 * wt-classes, utility classes used by Wt applications
 * Copyright (C) 2011 Boris Nagaev
 *
 * See the LICENSE file for terms of use.
 */

#ifndef WC_ABSTRACT_CAPTCHA_HPP_
#define WC_ABSTRACT_CAPTCHA_HPP_

#include <Wt/WGlobal>
#include <Wt/WCompositeWidget>
#include <Wt/WSignal>

namespace Wt {

namespace Wc {

/** Abstract captcha widget.
Automatic test used to ensure that the response is generated by a person.

To use this widget, connect solved() signal to a protected slot
and call check() instead of that slot.

\ingroup protection
*/
class AbstractCaptcha : public WCompositeWidget {
public:
    /** The signal emitted if the response is erroneous.
    The first argument is error message.
    */
    typedef Signal<WString> FaultSignal;

    /** Constructor */
    AbstractCaptcha(WContainerWidget* parent = 0);

    /** Destructor */
    ~AbstractCaptcha();

    /** Check correctness of the key, entered by user.
    In case the test is passed, solved() is emitted
    (not necessarily immediately).

    Otherwise update() is called and fault() is emitted.

    If the test was passed once for the widget,
    it is considered passed before a call of update().

    \note If previous call to check() has not been resulted
        in call to solve() or update() (i.e., a check is in progress),
        this method does not call check_impl().
    */
    void check();

    /** Update the widget with new secret key */
    void update();

    /** Return the signal emitted if the test is passed */
    Signal<>& solved() {
        return solved_;
    }

    /** Return the signal emitted if the response is erroneous */
    FaultSignal& fault();

protected:
    /** Update the widget with new secret key (implementation).
    This method should setImplementation(), or update existing one.
    */
    virtual void update_impl() = 0;

    /** You should call this method from check_impl() if the test is passed */
    void solve();

    /** You should call this method from check_impl() on error.
    \param message Error message
    This method updates the test and emits fault(), if exposed.
    */
    void mistake(const WString& message = "");

    /** Check correctness of the key, entered by user (implementation).
    If the test is passed, call solve(), otherwise update().
    */
    virtual void check_impl() = 0;

private:
    Signal<> solved_;
    FaultSignal* fault_;
    bool in_progress_: 1;
    bool is_solved_: 1;
};

}

}

#endif

